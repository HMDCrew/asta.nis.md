
import '../../scss/views/cart.scss'
import { sendHttpReq } from '../utils/api/http'
import { asta_alert } from '../utils/asta_alert'

const { nonce, json_url } = auctions_data
const chackout = document.querySelector('.chackout-btn')
const payment_form = document.querySelector('#payment-form')
const pay_submit = payment_form?.querySelector('#submit')
const my_cards = document.querySelector('.my-cards')
const cart = document.querySelector('.cart-menu')

const plus_qty_btns = document.querySelectorAll('.plus_qty')
const minus_qty_btns = document.querySelectorAll('.minus_qty')

const remove_item_btns = document.querySelectorAll('.remove')


let timeout_id;
const handle_qty = (btn, qty_fn) => {

    const constainer = btn.closest('.cart-item')
    const product_id = constainer.getAttribute('post_id')
    const container_qty = constainer.querySelector('.title sub.qty span')
    const price_info = constainer.querySelector('.price-info')
    const qty = parseInt(container_qty.textContent)
    const qty_fn_val = qty_fn(qty)

    container_qty.textContent = qty_fn_val > 0 ? qty_fn_val : 0

    constainer.classList.add('loading')
    clearTimeout(timeout_id);
    timeout_id = setTimeout(() => {

        sendHttpReq({
            url: json_url + 'api-qty-update',
            data: {
                product_id,
                qty: qty_fn_val > 0 ? qty_fn_val : 0
            },
            headers: { 'X-WP-Nonce': nonce },
            method: 'POST'
        }).then(res => {

            res = JSON.parse(res)

            const price = price_info.querySelector('span')
            price.textContent = res.cart_product.price

            container_qty.textContent = res.cart_product.product.qty
            constainer.classList.remove('loading')

        }).catch(e => {
            console.log(e);
            constainer.classList.remove('loading')
        });

    }, 1000);
}


plus_qty_btns.forEach(async btn => btn.addEventListener('click', ev => handle_qty(btn, (qty) => qty + 1), false))
minus_qty_btns.forEach(async btn => btn.addEventListener('click', ev => handle_qty(btn, (qty) => qty - 1), false))


const hundle_remove_item = (btn) => {

    const constainer = btn.closest('.cart-item')
    const product_id = constainer.getAttribute('post_id')

    constainer.classList.add('loading')
    clearTimeout(timeout_id);
    timeout_id = setTimeout(() => {

        sendHttpReq({
            url: json_url + 'api-remove-cart-product',
            data: {
                product_id,
            },
            headers: { 'X-WP-Nonce': nonce },
            method: 'POST'
        }).then(res => {

            res = JSON.parse(res)

            const n_products = cart.querySelector('.n_products')
            n_products.classList.remove('hide')
            const products_now = parseInt(n_products.textContent) - 1
            n_products.textContent = products_now

            if (0 === products_now) {
                location.reload()
            }

            if ('success' === res.status) {
                constainer.remove()
            }

        }).catch(e => {
            console.log(e);
            constainer.classList.remove('loading')
        });

    }, 1000);
}

remove_item_btns.forEach(async btn => btn.addEventListener('click', ev => hundle_remove_item(btn), false))

/**
 * The function `auth_3d_method` is used to handle the authentication process for a 3D secure payment
 * method using Stripe.
 * @param stripe - The `stripe` parameter is an instance of the Stripe object that is used to interact
 * with the Stripe API.
 * @param client_secret - The `client_secret` parameter is a unique identifier for the payment intent.
 * It is generated by the Stripe API when creating a payment intent and is used to authenticate and
 * confirm the payment on the client side.
 */
const auth_3d_method = async (stripe, client_secret) => {

    pay_submit.disabled = true

    const { error, paymentIntent } = await stripe.confirmCardPayment(client_secret, {
        return_url: `${window.location.origin}/thank-you/`,
    })

    if (error) {
        asta_alert([error.message])
        console.error(error.message)
        pay_submit.disabled = false
    } else if (paymentIntent.status === 'succeeded') {
        window.location.replace(`${window.location.origin}/thank-you/?payment_intent=${paymentIntent.id}`)
    } else if (paymentIntent.status === 'requires_action') {
        console.log('on_submit2 3d auth')
    } else {
        asta_alert(['Il pagamento è incompleto o non è andato a buon fine.'])
        pay_submit.disabled = false
    }
}


/**
 * The function `on_submit2` is an asynchronous function that handles the submission of a payment form
 * using Stripe, disables the submit button, and redirects the user to a thank-you page upon successful
 * payment confirmation.
 * @param e - The parameter "e" is an event object that represents the event that triggered the
 * function. In this case, it is likely an event object related to a form submission.
 * @param stripe - The `stripe` parameter is an instance of the Stripe object. It is used to interact
 * with the Stripe API and perform actions such as confirming payments.
 * @param elements - The `elements` parameter is an instance of the Stripe Elements library. It is used
 * to create and manage the payment form elements, such as the card number input, expiration date
 * input, and CVC input.
 */
const on_submit = async (e, stripe, elements) => {

    e.preventDefault()

    pay_submit.disabled = true

    const { error } = await stripe.confirmPayment({
        elements,
        confirmParams: {
            return_url: `${window.location.origin}/thank-you/`
        }
    })

    if (error) {
        asta_alert([error.message])
        console.log(error.message)
        pay_submit.disabled = false
    }
}


/**
 * The function `build_checkout` creates a Stripe payment form and attaches it to a specified element
 * on the page, and then adds an event listener to submit the form.
 * @param intent_secret - The `intent_secret` parameter is a client secret for a Stripe PaymentIntent.
 * It is used to authenticate and authorize the payment transaction on the server-side.
 * @param pk - The `pk` parameter is the public key for your Stripe account. It is used to authenticate
 * your requests to the Stripe API and ensure that the client-side integration is secure. You can find
 * your public key in the Stripe Dashboard under the API Keys section.
 */
const build_chackout = async (stripe, client_secret) => {

    const elements = stripe.elements({ clientSecret: client_secret })

    const payment_element = elements.create('payment')
    payment_element.mount('#payment-element')

    payment_form.addEventListener('submit', e => on_submit(e, stripe, elements))
}


/**
 * The `chackout_process` function sends a HTTP request to a specified URL and handles the response by
 * displaying a payment form if the request is successful, or showing an error message if there is an
 * error.
 * @param e - The parameter "e" in the `checkout_process` function is typically used to represent the
 * event object that triggered the function. It is commonly used in event handlers to access
 * information about the event that occurred, such as the target element or the event type.
 */
const chackout_process = (e) => {

    const card_actived = my_cards && my_cards.querySelector('.contaier-carte .card.active')

    sendHttpReq({
        url: json_url + 'api-cart-chackout',
        method: 'POST',
        data: {
            card: card_actived && card_actived.getAttribute('cart-id')
        },
        headers: { 'X-WP-Nonce': nonce }
    }).then(async res => {

        res = JSON.parse(res)

        if ('error' !== res.status) {

            const stripe = Stripe(res.public_key, { apiVersion: '2020-08-27' })

            switch (res.intent_status) {

                case 'requires_payment_method' || 'requires_action':
                    payment_form.classList.remove('d-none')
                    chackout.classList.add('d-none')
                    await build_chackout(stripe, res.client_secret)
                    break;

                case 'requires_confirmation':
                    await auth_3d_method(stripe, res.client_secret)
                    break;

                case 'succeeded':
                    window.location.replace(`${window.location.origin}/thank-you/?payment_intent=${res.payment_intent}`)
                    break;

                default:
                    break;
            }

        } else {
            asta_alert([res.message])
        }

    }).catch(e => {
        console.log(e)
    })
}


chackout && chackout.addEventListener('click', ev => chackout_process(ev), false)


if (my_cards) {

    const cards = my_cards.querySelectorAll('.contaier-carte .card')

    /**
     * The function `hundle_active_card` adds the class 'active' to a given card element and removes
     * the class from any previously active card.
     * @param card - The `card` parameter is the card element that needs to be activated.
     */
    const hundle_active_card = (card) => {

        const last_actived = my_cards.querySelector('.contaier-carte .card.active')

        if (card === last_actived) {
            card.classList.remove('active')
        } else {
            last_actived && last_actived.classList.remove('active')
            card.classList.add('active')
        }
    }

    cards.forEach(async card => card.addEventListener('click', ev => hundle_active_card(card), false))
}
